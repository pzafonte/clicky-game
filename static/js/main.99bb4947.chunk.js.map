{"version":3,"sources":["components/Card/Card.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","lib","s","m","l","onClick","clickHandler","icon","iconName","className","correct","react_fontawesome_index_es","Nav","window","clearTimeout","this","timeout","gameWon","message","clear","arguments","length","undefined","setTimeout","renderMessage","key","Math","random","score","highScore","Component","App","state","icons","faGithubAlt","faNodeJs","faReact","faChrome","faLinux","faApple","faReddit","faWindows","faFirefox","faNpm","faAws","faDev","sort","_this","randomize","clicked","indexOf","Object","toConsumableArray","concat","setState","max","_this2","components_Nav_Nav","map","components_Card_Card","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99bb4947.chunk.js","sourcesContent":["import React from 'react'\nimport { Col, CardPanel } from 'react-materialize';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './Card.css'\n\nconst Card = props => (\n    <Col s={12} m={4} l={3}>\n        <CardPanel onClick={() => props.clickHandler(props.icon.iconName)} className={\"hoverable green black-text center\" + (props.correct === false ? \" shake\" : \"\")}>\n            <FontAwesomeIcon icon={props.icon} />\n        </CardPanel>\n    </Col>\n)\n\nexport default Card","import React, { Component } from 'react'\nimport './Nav.css'\n\nclass Nav extends Component {\n    componentWillUnmount() {\n        window.clearTimeout(this.timeout)\n    }\n\n    renderMessage(correct, gameWon, clear = false) {\n        let message, className\n        if(clear) {\n            className = ''\n        }\n        else if (correct === undefined) {\n            message = `Click on an image to play...`\n            className = ''\n        } else {\n            message = gameWon ? 'You win! You guessed each card only once!' : (correct ? 'You guessed correctly!' : 'You guessed incorrectly')\n            className = correct ? 'correct' : 'incorrect'\n        }\n\n        window.clearTimeout(this.timeout)\n        if (!clear & correct !== undefined) {\n            this.timeout = window.setTimeout(this.renderMessage, gameWon ? 3000 : 1000, gameWon ? undefined : correct, false, true)\n        }\n        return <li key={Math.random()} className={className}>{message}</li>\n    }\n\n    render() {\n        return (\n            <nav className=\"nav-wrapper deep-orange\">\n                <div>\n                    <ul className=\"center navList\">\n                        <li className=\"logo\">Clicky Game</li>\n                        {this.renderMessage(this.props.correct, this.props.gameWon)}\n                        <li>Score: {this.props.score} | High Score: {this.props.highScore}</li>\n                    </ul>\n                </div>\n            </nav>\n\n        )\n    }\n}\n\nexport default Nav\n","import React, { Component } from 'react';\nimport { Row, CardPanel, Col } from 'react-materialize';\nimport { faGithubAlt, faNodeJs, faReact, faChrome, faLinux, faApple, faReddit, faWindows, faFirefox, faNpm, faAws, faDev} from '@fortawesome/free-brands-svg-icons'\nimport Card from './components/Card';\nimport Nav from './components/Nav';\n\nclass App extends Component {\n  state = {\n    icons: [faGithubAlt, faNodeJs, faReact, faChrome, faLinux, faApple, faReddit, faWindows, faFirefox, faNpm, faAws, faDev].sort(this.randomize),\n    clicked: [],\n    score: 0,\n    highScore: 0,\n    correct: undefined,\n    gameWon: false\n  }\n\n  randomize = () => Math.random() > .5 ? -1 : 1\n\n  clickHandler = iconName => {\n    if (this.state.clicked.indexOf(iconName) === -1) {\n      let score = this.state.clicked.length + 1,\n        clicked = score === this.state.icons.length ? [] : [...this.state.clicked, iconName]\n\n      this.setState({\n        icons: this.state.icons.sort(this.randomize),\n        clicked: clicked,\n        score: score,\n        highScore: Math.max(this.state.highScore, score),\n        correct: true,\n        gameWon: score === this.state.icons.length\n      })\n    } else {\n      this.setState({\n        icons: this.state.icons.sort(this.randomize),\n        clicked: [],\n        score: 0,\n        correct: false,\n        gameWon: false\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container-fluid\">\n          <Nav correct={this.state.correct} gameWon={this.state.gameWon} score={this.state.score} highScore={this.state.highScore} />\n          <Row>\n            <Col s={12}>\n              <CardPanel className=\"center\">\n                <p>Each unique image clicked earns you points. Don't click the same image more than once!</p>\n              </CardPanel>\n            </Col>\n          </Row>\n        </div>\n        <div className=\"container\">\n          <Row>\n            {this.state.icons.map(icon => <Card correct={this.state.correct} key={icon.iconName} icon={icon} clickHandler={this.clickHandler} />)}\n          </Row>\n        </div>\n      </div>\n\n\n    );\n  }\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}